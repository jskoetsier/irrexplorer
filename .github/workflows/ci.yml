name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: irrexplorer
          POSTGRES_USER: irrexplorer
          POSTGRES_DB: irrexplorer
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -r requirements.txt
        uv pip install --system -r requirements-dev.txt

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://irrexplorer:irrexplorer@localhost:5432/irrexplorer
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m alembic upgrade head

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://irrexplorer:irrexplorer@localhost:5432/irrexplorer
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        pytest --cov=irrexplorer --cov-report=xml --cov-report=term-missing --verbose

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -r requirements.txt
        uv pip install --system -r requirements-dev.txt

    - name: Run ruff linter
      run: |
        ruff check irrexplorer/ --output-format=github

    - name: Run ruff formatter check
      run: |
        ruff format --check irrexplorer/

    - name: Run isort check
      run: |
        isort --check-only --diff irrexplorer/

    - name: Run mypy type checking
      run: |
        mypy irrexplorer/ --ignore-missing-imports --no-error-summary || true


  frontend:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install frontend dependencies
      working-directory: frontend
      run: yarn install --frozen-lockfile

    - name: Run ESLint
      working-directory: frontend
      run: yarn lint || true

    - name: Build frontend
      working-directory: frontend
      run: yarn build:prod

    - name: Check bundle size
      working-directory: frontend
      run: |
        du -sh build/
        du -sh build/static/js/
        du -sh build/static/css/

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker compose build

    - name: Start services
      run: |
        docker compose up -d
        sleep 30

    - name: Check service health
      run: |
        docker compose ps
        curl -f http://localhost:8000/api/metadata/ || exit 1

    - name: Run integration tests
      run: |
        docker compose exec -T backend pytest tests/integration/ || true

    - name: Check logs
      if: always()
      run: |
        docker compose logs backend

    - name: Stop services
      if: always()
      run: |
        docker compose down -v

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        test -f README.md
        test -f INSTALLATION.md
        test -f DEVELOPMENT.md
        test -f DOCKER.md
        test -f CHANGELOG.md
        test -f ROADMAP.md

    - name: Validate Markdown
      uses: DavidAnson/markdownlint-cli2-action@v14
      with:
        globs: '**/*.md'
      continue-on-error: true

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [test, code-quality, frontend, integration, documentation]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Test: ${{ needs.test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Documentation: ${{ needs.documentation.result }}"
