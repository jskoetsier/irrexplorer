version: '3.8'

services:
    # PostgreSQL database
    postgres:
      image: postgres:15
      container_name: irrexplorer-postgres
      environment:
        POSTGRES_DB: irrexplorer
        POSTGRES_USER: irrexplorer
        POSTGRES_PASSWORD: irrexplorer
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - irrexplorer-network
      restart: unless-stopped
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U irrexplorer"]
        interval: 10s
        timeout: 5s
        retries: 5

    # Redis for caching
    redis:
      image: redis:7-alpine
      container_name: irrexplorer-redis
      networks:
        - irrexplorer-network
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 3s
        retries: 3

    # Routinator for RPKI validation
    routinator:
      image: nlnetlabs/routinator:latest
      container_name: irrexplorer-routinator
      networks:
        - irrexplorer-network
      ports:
        - "8323:8323"
      volumes:
        - routinator_data:/root/.rpki-cache
      command: server --rtr 0.0.0.0:8323 --http 0.0.0.0:8080
      restart: unless-stopped

    # Backend (FastAPI)
    backend:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: irrexplorer-backend
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
      environment:
        DATABASE_URL: postgresql://irrexplorer:irrexplorer@postgres/irrexplorer
        REDIS_URL: redis://redis:6379/0
        ROUTINATOR_URL: http://routinator:8080
        JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-in-production-please}
      ports:
        - "8000:8000"
      networks:
        - irrexplorer-network
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/api/status"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s

    # Frontend (nginx serving React build)
    frontend:
      build:
        context: .
        dockerfile: Dockerfile.frontend
      container_name: irrexplorer-frontend
      depends_on:
        - backend
      ports:
        - "8080:80"
      networks:
        - irrexplorer-network
      restart: unless-stopped

    # BGPalerter - BGP Monitoring and Alerting
    bgpalerter:
      image: docker.io/nttgin/bgpalerter:latest
      container_name: irrexplorer-bgpalerter
      stdin_open: false
      tty: false
      environment:
        - BGPALERTER_SKIP_PROMPT=true
      volumes:
        - ./bgpalerter/config.yml:/opt/bgpalerter/config.yml:ro
        - ./bgpalerter/prefixes.yml:/opt/bgpalerter/prefixes.yml:rw
        - bgpalerter_data:/opt/bgpalerter/volume
      ports:
        - "8011:8011"
      networks:
        - irrexplorer-network
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "wget", "--spider", "-q", "http://localhost:8011/status"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 60s

networks:
  irrexplorer-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  routinator_data:
    driver: local
  bgpalerter_data:
    driver: local
